==========================
RGB/LAB image array format
==========================
RGB -- shape: (height, width, 3):
[
    [
        [R, G, B],
        [R, G, B],
        ...
    ],
    [
        [R, G, B],
        [R, G, B],
        ...
    ],
    ...
]

LAB -- shape: (height, width, 3):
[
    [
        [L, A, B],
        [L, A, B],
        ...
    ],
    [
        [L, A, B],
        [L, A, B],
        ...
    ],
    ...
]



========================================================
Split an image into superpixels using the SLIC algorithm
========================================================
Modules:
    from skimage.util         import img_as_float
    from skimage.segmentation import slic

Step[1]:
    Convert the image to floating point format.

    Code:
    image = img_as_float(image)

Step[2]:
    Apply the SLIC algorithm.

    Code:
    segments = slic(image, convert2lab=False, n_segments=<Desired number of segments>, sigma=5)

    Output:
       image = [[[L, A, B],        [L, A, B],        ...], [[L, A, B],        [L, A, B],        ...], ...]
    segments = [[superpixel_index, superpixel_index, ...], [superpixel_index, superpixel_index, ...], ...]

    Notes:
        - For each pixel ([L, A, B]) in the image array, we have the index of the superpixel it belongs to, on the same position in the segments array.
          
          Example:
          pixel = image[0][1]
          superpixel_index = superpixels[0][1]



====================
Superpixel Isolation
====================
Modules:
    import numpy
    import cv2

Step[1]:
    Create a mask array with zeros and shape: (image_height, image_width).

    Code:
    mask = numpy.zeros(image.shape[:2], dtype="uint8")

    Output:
    mask = [[0, 0, ...], [0, 0, ...], ...]

Step[2]:
    In the mask array, at the positions which belong to the wanted superpixel, make the value equal to 255.

    Code:
    mask[superpixels == superpixel_index] = 255

Step[3]:
    Perform a bitwise AND operation with the image array (in LAB) and the mask array.
    The result will be an image array with the same shape as the original image array, but with black pixels ([0, 0, 0]) everywhere else except the pixels which belong to the wanted superpixel.

    Code:
    superpixel = cv2.bitwise_and(lab_image, lab_image, mask=mask)



===========================
Superpixel Color Extraction
===========================
Modules:
    import numpy

Step[1]:
    Find the pixel positions in the superpixel array which belong to the wanted superpixel.

    Code:
    superpixel[superpixels == superpixel_index]

Step[2]:
    Create an array which contains only the A and B colors of all the pixels found by step[1].

    Code:
    colors = numpy.vstack(superpixel[superpixels == superpixel_index], 1:3)

    Output:
    colors = [[A, B], [A, B], ...]

Step[3]:
    Using the results of step[2], we will isolate each A and B color and apply labels.

    Code:
    labeled_colors = pandas.DataFrame(colors, columns=['A', 'B'])

    Output:
                       A              B
    index  A color value  B color value
    index  A color value  B color value
    index  A color value  B color value
    ...



=======================================
Find the dominant color of a superpixel
=======================================
Modules:
    from sklearn.cluster import KMeans

Step[1]:
    Extract the superpixel colors and categorize them using KMeans.

    Code:
    kmeans = KMeans(n_clusters=5, n_jobs=1)
    kmeans.fit(colors.values)

Step[2]:
    Get the color label (group) for each color from the KMeans.

    Code:
    colors['labels'] = kmeans.labels_
    
    Output:
       colors.values = [[A, B],   [A, B],   ...]
    colors['labels'] = [group ID, group ID, ...]

Step[3]:
    Find the color label (group) with the most colors.

    Code:
    dominant_label = colors['labels'].value_counts().index[0]

Step[4]:
    Find the colors which belong to the dominant label and calculate the dominant color.

    Code:
    dominant_color = colors.loc[colors['labels'] == dominant_label].apply(lamda x: x.median())[['A', 'B']]


